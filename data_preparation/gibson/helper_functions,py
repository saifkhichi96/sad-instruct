import trimesh
import json
import numpy as np


def convert_mesh_to_point_cloud(obj_path, num_points=10000):
    """
    Converts a 3D mesh to a point cloud by sampling points uniformly on the mesh surface.

    Parameters:
    - obj_path: str, path to the .obj file of the mesh.
    - num_points: int, number of points to sample on the mesh surface.

    Returns:
    - A trimesh.points.PointCloud object representing the point cloud.
    """
    # Sample points uniformly on the mesh surface
    mesh = trimesh.load(obj_path)
    cloud = trimesh.points.PointCloud(mesh.sample(num_points))

    return cloud

def room_wise_object_json(npz_path, room_id):
    """
    Extracts the objects in a room from the 3DSceneGraph data and returns them as a dictionary.

    Parameters:
    - npz_path: The path to the .npz file containing the 3DSceneGraph data.
    - room_id: The ID of the room to extract objects from.

    Returns:
    - A dictionary containing the room ID and a list of objects in the room.
    """


    a = np.load(npz_path, allow_pickle=True)
    data = a['output'].item()
    # room = data['room'][room_id]
    objects = data['object'] # Objects is a dictionary with object IDs as keys
    room_objects = []
    #iterate through all objects and get the objects in the room
    for obj_id, obj in objects.items():
        if obj['parent_room'] == room_id:
            room_objects.append(obj)
    room_data = {
        'room': room_id,
        'objects': room_objects
    }
    return room_data


if __name__ == '__main__':
    # Testing the point cloud conversion function
    cloud = convert_mesh_to_point_cloud('gibson_tiny/Allensville/mesh.obj', num_points=10000)

    # Testing the room-wise object extraction function
    room_data = room_wise_object_json('3DSceneGraph_tiny/data/verified_graph/3DSceneGraph_Allensville.npz', 1)
    